/* eslint-disable @typescript-eslint/no-explicit-any */
// Áâ©ÂìÅÂ≠óÊÆµÁªÑ‰ª∂
import { AddIcon, DownloadIcon } from "@chakra-ui/icons";
import {
  Box,
  Flex,
  HStack,
  Heading,
  IconButton,
  Stack,
  Divider,
  Button,
} from "@chakra-ui/react";
import { Control, useFieldArray, useWatch, useFormContext } from "react-hook-form";
import { ExtendedAlgoInput } from "../types/extended";
import Field from "./Field";
import SelectField from "./SelectField";
import { useContext, useEffect, useState } from "react";
import { AppContext } from "./AppProvider";
import uniqolor from "uniqolor";
import { ItemBoxPreset } from "./ItemBoxPresetEditor";
import { readProductDataFromExcel, ProductData } from "../utils/excelUtils";
import ProductImportModal from "./ProductImportModal";
import { useToast } from "@chakra-ui/react";

type Props = {
  control: Control<ExtendedAlgoInput, any, ExtendedAlgoInput>;
  itemBoxPresets?: ItemBoxPreset[];
};

function BoxFields(props: Props) {
  const { setColorMap } = useContext(AppContext);
  const { control, itemBoxPresets = [] } = props;
  const { setValue } = useFormContext<ExtendedAlgoInput>();
  const boxFields = useFieldArray({ control, name: "items" });
  const toast = useToast();
  
  // ÂØºÂÖ•Áõ∏ÂÖ≥Áä∂ÊÄÅ
  const [isImportModalOpen, setIsImportModalOpen] = useState(false);
  const [importProducts, setImportProducts] = useState<ProductData[]>([]);
  
  // ÁõëÂê¨ÊâÄÊúâÁâ©ÂìÅÁöÑÂáÄÈáçÂíåÁõíÂ≠êÂáÄÈáçÂèòÂåñ
  const watchedItems = useWatch({ control, name: "items" });
  
  // Ëá™Âä®ËÆ°ÁÆó‰∫ßÂìÅÊØõÈáç
  useEffect(() => {
    if (watchedItems) {
      watchedItems.forEach((item, idx) => {
        if (item && typeof item.productNetWeight === 'number' && typeof item.boxNetWeight === 'number') {
          const grossWeight = item.productNetWeight + item.boxNetWeight;
          const currentGrossWeight = item.productGrossWeight;
          // Âè™ÊúâÂΩìËÆ°ÁÆóÂá∫ÁöÑÊØõÈáç‰∏éÂΩìÂâçÂÄº‰∏çÂêåÊó∂ÊâçÊõ¥Êñ∞
          if (grossWeight !== currentGrossWeight) {
            setValue(`items.${idx}.productGrossWeight`, grossWeight);
          }
        }
      });
    }
  }, [watchedItems, setValue]);

  // ÁõëÂê¨ÁõíÂ≠êËßÑÊ†ºÈÄâÊã©ÂèòÂåñ
  useEffect(() => {
    if (watchedItems) {
      watchedItems.forEach((item: any, idx) => {
        if (item && item.boxPreset) {
          const preset = itemBoxPresets.find(p => p.id === item.boxPreset);
          if (preset) {
            // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞Â∞∫ÂØ∏ÂíåÂáÄÈáç
            const needsUpdate = 
              item.dim[0] !== preset.dimensions[0] ||
              item.dim[1] !== preset.dimensions[1] ||
              item.dim[2] !== preset.dimensions[2] ||
              item.boxNetWeight !== preset.netWeight;
            
            if (needsUpdate) {
              setValue(`items.${idx}.dim.0`, preset.dimensions[0]);
              setValue(`items.${idx}.dim.1`, preset.dimensions[1]);
              setValue(`items.${idx}.dim.2`, preset.dimensions[2]);
              setValue(`items.${idx}.boxNetWeight`, preset.netWeight);
            }
          }
        }
      });
    }
  }, [watchedItems, setValue, itemBoxPresets]);
  // Â§ÑÁêÜÊñá‰ª∂ÂØºÂÖ•
  const handleFileImport = async (file: File) => {
    console.log('üöÄ ÂºÄÂßãÂ§ÑÁêÜÊñá‰ª∂ÂØºÂÖ•:', file.name, file.size, 'bytes');
    
    try {
      const products = await readProductDataFromExcel(file);
      console.log('üì¶ ËØªÂèñÂà∞ÁöÑ‰∫ßÂìÅÊï∞ÊçÆ:', products);
      
      if (products.length === 0) {
        console.log('‚ö†Ô∏è Êú™ÊâæÂà∞‰∫ßÂìÅÊï∞ÊçÆ');
        toast({
          title: 'Êú™ÊâæÂà∞‰∫ßÂìÅÊï∞ÊçÆ',
          description: 'ËØ∑Ê£ÄÊü•ExcelÊñá‰ª∂Ê†ºÂºèÊòØÂê¶Ê≠£Á°Æ',
          status: 'warning',
          duration: 3000,
          isClosable: true,
        });
        return;
      }
      
      console.log('‚úÖ ËÆæÁΩÆÂØºÂÖ•‰∫ßÂìÅÊï∞ÊçÆÂπ∂ÊâìÂºÄÂºπÁ™ó');
      setImportProducts(products);
      setIsImportModalOpen(true);
    } catch (error) {
      console.error('‚ùå Êñá‰ª∂ÂØºÂÖ•Â§±Ë¥•:', error);
      toast({
        title: 'Êñá‰ª∂ËØªÂèñÂ§±Ë¥•',
        description: error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // Â§ÑÁêÜÂØºÂÖ•Á°ÆËÆ§
  const handleImport = (selectedProducts: any[]) => {
    console.log('ÂØºÂÖ•ÁöÑ‰∫ßÂìÅ:', selectedProducts);
    
    selectedProducts.forEach((product, index) => {
      const selectedPreset = itemBoxPresets.find(preset => preset.id === product.selectedBoxPreset);
      
      // ÁîüÊàêÂîØ‰∏ÄÁöÑ‰∫ßÂìÅIDÔºåÁ°Æ‰øùÊØè‰∏™‰∫ßÂìÅÈÉΩÊúâ‰∏çÂêåÁöÑÈ¢úËâ≤
      const uniqueId = product.customerNumber || `${product.oeNumber}_${Date.now()}_${index}`;
      
      // Ë∞ÉËØïÊó•ÂøóÔºöÊâìÂç∞‰∫ßÂìÅ‰ø°ÊÅØÂíåÁîüÊàêÁöÑID
      console.log(`‰∫ßÂìÅ ${index + 1}:`, {
        customerNumber: product.customerNumber,
        oeNumber: product.oeNumber,
        uniqueId: uniqueId,
        timestamp: Date.now(),
        index: index
      });
      
      boxFields.append({
        id: uniqueId,
        dim: selectedPreset ? selectedPreset.dimensions : [0, 0, 0],
        qty: product.editableQuantity,
        oeNumber: product.oeNumber,
        productNetWeight: 0,
        productGrossWeight: selectedPreset ? selectedPreset.netWeight : 0,
        boxNetWeight: selectedPreset ? selectedPreset.netWeight : 0,
      });
      
      // ‰ΩøÁî®È¢ÑÂÆö‰πâÁöÑÈ´òÂØπÊØîÂ∫¶È¢úËâ≤Êï∞ÁªÑÔºåÁ°Æ‰øùÊØè‰∏™‰∫ßÂìÅÈÉΩÊúâÊòéÊòæ‰∏çÂêåÁöÑÈ¢úËâ≤
      const highContrastColors = [
        '#FF6B6B', // Á∫¢Ëâ≤
        '#4ECDC4', // ÈùíËâ≤
        '#45B7D1', // ËìùËâ≤
        '#96CEB4', // ÁªøËâ≤
        '#FFEAA7', // ÈªÑËâ≤
        '#DDA0DD', // Á¥´Ëâ≤
        '#98D8C8', // ËñÑËç∑Áªø
        '#F7DC6F', // ÈáëÈªÑËâ≤
        '#BB8FCE', // Ê∑°Á¥´Ëâ≤
        '#85C1E9', // Â§©ËìùËâ≤
        '#F8C471', // Ê©ôËâ≤
        '#82E0AA', // ÊµÖÁªøËâ≤
        '#F1948A', // Á≤âÁ∫¢Ëâ≤
        '#85C1E9', // ÊµÖËìùËâ≤
        '#D7BDE2'  // Ê∑°Á¥´Ëâ≤
      ];
      
      // ‰ΩøÁî®‰∫ßÂìÅÁ¥¢ÂºïÊù•ÈÄâÊã©È¢úËâ≤ÔºåÁ°Æ‰øù‰∏çÂêå‰∫ßÂìÅÊúâ‰∏çÂêåÈ¢úËâ≤
      const colorIndex = index % highContrastColors.length;
      const generatedColor = highContrastColors[colorIndex];
      console.log(`üé® ‰∏∫‰∫ßÂìÅ ${uniqueId} (Á¥¢Âºï${index}) ÂàÜÈÖçÈ¢úËâ≤: ${generatedColor}`);
      
      setColorMap(uniqueId, generatedColor);
      console.log(`‚úÖ È¢úËâ≤Êò†Â∞ÑÂ∑≤ËÆæÁΩÆ: ${uniqueId} -> ${generatedColor}`);
    });
  };

  const add = () => {
    const id = `‰∫ßÂìÅ ${boxFields.fields.length + 1}`;
    boxFields.append({
      id,
      dim: [0, 0, 0],
      qty: 1,
      oeNumber: "",
        productNetWeight: 0,
      productGrossWeight: 0,
      boxNetWeight: 0,
    });
    setColorMap(id, uniqolor(id).color);
  };
  const remove = (idx: number) => {
    boxFields.remove(idx);
  };
  return (
    <>
      <Flex
        zIndex={99}
        px="3"
        py="2"
        bg="rgb(42 45 56 / 100%)"
        position="sticky"
        top="0"
        align="start"
        justify="space-between"
      >
        <Heading size="sm" color="white">
          ‰∫ßÂìÅ
        </Heading>
        <HStack spacing={1}>
          <IconButton
            onClick={() => {
              // ÂàõÂª∫Êñá‰ª∂ËæìÂÖ•ÂÖÉÁ¥†
              const input = document.createElement('input');
              input.type = 'file';
              input.accept = '.xls,.xlsx';
              input.onchange = (e) => {
                const file = (e.target as HTMLInputElement).files?.[0];
                if (file) {
                  handleFileImport(file);
                }
              };
              input.click();
            }}
            size="xs"
            aria-label="import"
            icon={<DownloadIcon />}
            title="ÂØºÂÖ•‰∫ßÂìÅÊï∞ÊçÆ"
          />
          <IconButton
            onClick={add}
            size="xs"
            aria-label="add"
            icon={<AddIcon />}
          />
        </HStack>
      </Flex>
      <Stack px="3" divider={<Divider />} spacing="4">
        {boxFields.fields.map((field, idx) => (
          <Box key={field.id} borderRadius="md" p="1">
            <HStack>
              <Field label="Ê†áÁ≠æ" name={`items.${idx}.id`} control={control} />
              <Field
                flex="1"
                label="Êï∞Èáè"
                name={`items.${idx}.qty`}
                control={control}
                type="number"
                options={{ min: 1, required: true }}
              />
            </HStack>
            <HStack mt="1">
              <Field
                flex="1"
                label="OEÂè∑"
                name={`items.${idx}.oeNumber`}
                control={control}
                placeholder="ËØ∑ËæìÂÖ•OEÂè∑"
              />
            </HStack>
            <HStack mt="1">
              <Field
                flex="1"
                label="‰∫ßÂìÅÂáÄÈáç (g)"
                name={`items.${idx}.productNetWeight`}
                control={control}
                type="number"
                step="0.01"
                options={{ min: 0 }}
              />
              <Field
                flex="1"
                label="‰∫ßÂìÅÊØõÈáç (g)"
                name={`items.${idx}.productGrossWeight`}
                control={control}
                type="number"
                step="0.01"
                options={{ 
                  min: 0,
                  disabled: true // ‰∏çÂÖÅËÆ∏ÊâãÂä®ÁºñËæë
                }}
                placeholder="Ëá™Âä®ËÆ°ÁÆóÔºö‰∫ßÂìÅÂáÄÈáç + ÁõíÂ≠êÂáÄÈáç"
              />
            </HStack>
            <HStack mt="1">
              <Box flex="2">
                <SelectField
                  label="ÁõíÂ≠êËßÑÊ†º"
                  name={`items.${idx}.boxPreset` as any}
                  control={control as any}
                  placeholder="ÈÄâÊã©ÁõíÂ≠êËßÑÊ†º"
                  selectOptions={itemBoxPresets.map(preset => ({
                    value: preset.id,
                    label: preset.name
                  }))}
                />
              </Box>
              <Field
                flex="1"
                label="ÁõíÂ≠êÂáÄÈáç (g)"
                name={`items.${idx}.boxNetWeight`}
                control={control}
                type="number"
                step="0.01"
                options={{ min: 0 }}
              />
            </HStack>
            <Box mt="1">
              <HStack>
                <Field
                  flex="1"
                  label="ÈïøÂ∫¶"
                  name={`items.${idx}.dim.0`}
                  control={control}
                  type="number"
                  step="0.01"
                  options={{ min: 1, required: true }}
                />
                <Field
                  flex="1"
                  label="ÂÆΩÂ∫¶"
                  name={`items.${idx}.dim.1`}
                  control={control}
                  type="number"
                  step="0.01"
                  options={{ min: 1, required: true }}
                />
                <Field
                  flex="1"
                  label="È´òÂ∫¶"
                  name={`items.${idx}.dim.2`}
                  control={control}
                  type="number"
                  step="0.01"
                  options={{ min: 1, required: true }}
                />
              </HStack>

            </Box>
            <Button
              size="xs"
              w="full"
              colorScheme="red"
              variant="link"
              onClick={() => remove(idx)}
            >
              Âà†Èô§
            </Button>
          </Box>
        ))}
      </Stack>
      
      <ProductImportModal
        isOpen={isImportModalOpen}
        onClose={() => setIsImportModalOpen(false)}
        products={importProducts}
        onImport={handleImport}
        itemBoxPresets={itemBoxPresets}
      />
    </>
  );
}

export default BoxFields;
